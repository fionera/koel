security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    providers:
        db_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_me:
            pattern:    ^/api/me
            methods: [OPTIONS, DELETE]
            security: false
        api_play:
            pattern:    ^/api/[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}/play
            methods: [GET]
            security: false
        api_login:
            pattern:    ^/api/me
            methods: [POST]
            security: false
        login:
            pattern:    ^/
            provider: db_provider
            json_login:
                check_path:               /user/login
                username_path:            email
                password_path:            password
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false
            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/me, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }
